# tasks file for gui
- name: Import facts
  import_tasks: "../../default_facts/default_facts.yml"

- name: Find mount points
  shell: "df -T | awk '/ext4|xfs|btrfs/ { print $NF; }'"
  register: active_mount_points
  changed_when: false

- block:
  - debug:
      msg: "Setting LV sizes for VG size {{ vg_system_size|float }} GB"

  - name: Tiny VG system
    set_fact:
        logical_volumes: "{{ logical_volumes_small }}"
    when: vg_system_size|float < 30.0

  - name: Mid size VG system
    set_fact:
        logical_volumes: "{{ logical_volumes_mid }}"
    when: vg_system_size|float >= 30.0 and vg_system_size|float < 100.0

  - name: Large VG system
    set_fact:
        logical_volumes: "{{ logical_volumes_large }}"
    when: vg_system_size|float >= 100.0 and vg_system_size|float < 250.0

  - name: Huge VG system
    set_fact:
        logical_volumes: "{{ logical_volumes_huge }}"
    when: vg_system_size|float >= 250.0

  - name: Resize volumes
    lvol:
        vg: system
        lv: "{{ item.name }}"
        size: "{{ item.size }}"
        resizefs: yes
    when: item.mount_point in active_mount_points.stdout_lines
    loop: "{{ logical_volumes }}"
    ignore_errors: yes
  when: ansible_lvm.vgs.system is defined

- debug:
    msg: "We will extend home later if more than 10% free in VG system"
  notify: resize_home
  changed_when: ansible_lvm.vgs.system is defined
    and
    (ansible_lvm.vgs.system.free_g|float / ansible_lvm.vgs.system.size_g|float > 0.1)

- block:
  - name: "Enable RpmFusion on EL"
    command:
      cmd: "dnf install -y {{ item.url }}"
      creates: "/etc/yum.repos.d/{{ item.repo }}"
    with_items:
      - url: https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-{{ ansible_distribution_major_version }}.noarch.rpm
        repo: rpmfusion-free-updates.repo
      - url: https://mirrors.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-{{ ansible_distribution_major_version }}.noarch.rpm
        repo: rpmfusion-nonfree-updates.repo
    when:
      - ansible_distribution_file_variety == "RedHat"
      - ansible_distribution != "Fedora"

  - name: "Enable RpmFusion on Fedora"
    command:
      cmd: "dnf install -y {{ item.url }}"
      creates: "/etc/yum.repos.d/{{ item.repo }}"
    with_items:
      - url: https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ ansible_distribution_major_version }}.noarch.rpm
        repo: rpmfusion-free-updates.repo
      - url: https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ ansible_distribution_major_version }}.noarch.rpm
        repo: rpmfusion-nonfree-updates.repo
    when: ansible_distribution == "Fedora"

  - name: "Install RpmFusion tainted"
    dnf:
      name:
        - rpmfusion-free-release-tainted
        - rpmfusion-nonfree-release-tainted
  when: not foreman['content_view'] is defined

- name: Disable external repositories
  include_role:
    name: 01-no-external-repositories

- name: Install updates
  dnf:
    name: "*"
    state: latest

- name: Disable external repositories
  include_role:
    name: 01-no-external-repositories

- name: "Install CentOS packages: {{ gui_rpm_packages_centos | sort | join(', ') }}"
  dnf:
    name: "{{ gui_rpm_packages_centos }}"
    state: present
    nobest: true
    skip_broken: true
    exclude: "{{ exclude_packages }}"
  when:
    - ansible_distribution_file_variety == "RedHat"
    - ansible_distribution != "Fedora"

- name: "Install Fedora packages: {{ gui_rpm_packages_fedora | sort | join(', ') }}"
  dnf:
    name: "{{ gui_rpm_packages_fedora }}"
    exclude: "{{ exclude_packages }}"
    state: present
    nobest: true
    skip_broken: true
  when: ansible_distribution == "Fedora"

- name: "Check diskspace on /"
  shell: "df / --output=avail --block-size=G | tr -d ' G' | tail -1"
  register: free_root_fs
  changed_when: no

- name: "diskspace on /"
  debug:
    var: free_root_fs.stdout

- name: "Install Fedora extra packages: {{ gui_extra_themes | sort | join(', ') }}"
  dnf:
    name: "{{ gui_extra_themes }}"
    exclude: "{{ gui_extra_themes_exclude }}"
    state: present
    nobest: true
    skip_broken: true
  when:
    - ansible_distribution == "Fedora"
    - free_root_fs.stdout | int > 10

- name: Disable external repositories
  include_role:
    name: 01-no-external-repositories

- name: "Remove packages: {{ remove_packages | sort | join(', ') }}"
  dnf:
    name: "{{ remove_packages }}"
    state: absent
    disable_excludes: yes

- name: Install kwallet
  dnf:
    name:
        - kf5-kwallet
        - kwalletmanager5
        - pam-kwallet
    state: present

- name: Enable pam_kwallet
  lineinfile:
    path: /etc/pam.d/gdm-password
    line: "{{ item }}"
    regexp: "^[# ]*{{ item | regex_replace(' +', ' +') }}.*$"
  loop:
    - "-auth       optional      pam_kwallet5.so"
    - "-auth       optional      pam_kwallet.so"
    - "-session    optional      pam_kwallet5.so auto_start"
    - "-session    optional      pam_kwallet.so auto_start"

- name: Install cups client.conf
  template:
    src: client.conf
    dest: /etc/cups/client.conf
    group: lp

- name: "Get current systemd default"
  command: "systemctl get-default"
  changed_when: false
  register: systemdefault

- name: Enable display manager
  command: systemctl set-default graphical.target
  when: "'graphical' not in systemdefault.stdout"

- name: "Get sddm status"
  systemd:
    name: "sddm.service"
  register: sddm_status

- name: Disable sddm
  service:
    name: sddm
    enabled: no
  when: sddm_status.status.ExecStart is defined

- name: Enable gdm
  service:
    name: gdm
    enabled: yes

- name: "Set default session: create /etc/accountsservice/user-templates"
  file:
    path: /etc/accountsservice/user-templates
    recurse: true
    state: directory

- name: "Set default session: copy /usr/share/accountsservice/user-templates/standard"
  copy:
    src: /usr/share/accountsservice/user-templates/standard
    dest: /etc/accountsservice/user-templates
    remote_src: true
    force: false

- name: "Set default session: edit /etc/accountsservice/user-templates/standard"
  ini_file:
    path: /etc/accountsservice/user-templates/standard
    section: User
    option: "{{ item.key }}"
    value: "{{ item.value }}"
  with_dict:
    Session: plasma
    Icon: "/var/lib/AccountsService/icons/${USER}.jpg"

- name: Is gdm running
  command: systemctl is-active gdm.service
  register: gdm_status
  changed_when: "'inactive' in gdm_status.stdout"
  failed_when: false
  notify: start_gdm

- name: "Install abcde.conf"
  copy:
    dest: /etc/skel/.abcde.conf
    content: |
        content:PADTRACKS=y
        MAXPROCS=4

        # as $1 and outputs it on stdout.
        mungefilename ()
        {
            echo "$@" |
                sed 's/:/ - /g' |
                tr '`' "'" |
                tr / '-' |
                sed "s/''/\"/g" |
                sed 's/"\([^"]*\)"/»\1«/g' |
                tr -d '?[:cntrl:]' |
                sed 's/  */ /g' |
                cat
        }

        EJECTCD=y

        FLACOPTS="-8"
        OGGENCOPTS=-"q 10"

        pre_read  ()
        {
            eject -t
            sleep 5
        }

- name: Create folder in /etc/skel
  file:
    path: "/etc/skel/{{ item }}"
    state: directory
  loop:
    - ".config/gtk-3.0"
    - ".local/share"
    - ".bashrc.d"

- name: "Find automount maps on {{ ldap_servers | first}}"
  community.general.ldap_search:
    dn: "cn={{ automount_location }},cn=automount,{{ ldap_base_dn }}"
    server_uri: "ldap://{{ ldap_servers | first}}/"
    sasl_class: gssapi
    scope: children
    filter: "(&(automountInformation=*)(automountKey=/*)(!(automountKey=/-)))"
  register: auto_maps
  environment:
    KRB5_CLIENT_KTNAME: /etc/krb5.keytab

- name: "Find mounts on {{ ldap_servers | first}}"
  community.general.ldap_search:
    dn: "automountmapname={{ item.automountInformation }},cn={{ automount_location }},cn=automount,{{ ldap_base_dn }}"
    server_uri: "ldap://{{ ldap_servers | first}}/"
    sasl_class: gssapi
    scope: children
    filter: "automountKey=*"
  loop: "{{ auto_maps.results }}"
  register: auto_keys
  environment:
    KRB5_CLIENT_KTNAME: /etc/krb5.keytab

- name: "Append automount folders to bookmarks"
  set_fact:
    file_bookmarks: |-
        {%- set ns = namespace(bookmarks=[]) -%}
        {%- for map in auto_keys.results -%}
            {%- for key in map.results -%}
                {%- if map.item.description[0] == "/" -%}
                    {%- set name = "Remote Folder: " + map.item.description + "/" + key.automountKey -%}
                {%- else -%}
                    {%- set name = map.item.description + ": " + key.automountKey -%}
                {%- endif -%}
                {%- set ns.bookmarks = ns.bookmarks + [{
                    "name": name,
                    "url": "file://" + map.item.description + "/" + key.automountKey,
                    "icon": "folder-remote"
                }]
                -%}
            {%- endfor -%}
        {%- endfor -%}
        {{ (gui_file_bookmarks + ns.bookmarks) | sort(attribute='name') }}

- name: Install bashrc.d scripts
  template:
    src: "{{ item }}"
    dest: /etc/profile.d
    force: yes
  with_items:
    - patch_file_bookmarks.sh
    - get-face-from-ldap.sh

- name: "Install xdg autostart files"
  copy:
    content: |
      [Desktop Entry]
      Type=Application
      Name={{ item.name }}
      NoDisplay=true
      Exec={{ item.exec }}
    dest: "/etc/xdg/autostart/{{ item.filename }}"
  with_items:
    - name: Patch user-places.xbel
      exec: bash /etc/profile.d/patch_file_bookmarks.sh -f -s 5
      filename: patch_file_bookmarks.desktop
    - name: "Get user face from LDAP"
      exec: bash /etc/profile.d/get-face-from-ldap.sh
      filename: get-face-from-ldap.desktop

- name: "Create update-gdm-faces.sh"
  copy:
    content: |
      for i in $( last --since yesterday | awk '/login/ { print $1; }' | sort -u ) ; do
        FACE=$( eval echo ~$i/.face.icon )
        if [ -e "$FACE" ]; then
          cp -v $FACE /var/lib/AccountsService/icons/$i.jpg
          chmod -v +r /var/lib/AccountsService/icons/$i.jpg
        fi
      done
    dest: /usr/local/bin/update-gdm-faces.sh
    mode: 0775

- name: "Auto update user faces"
  cron:
    name: "Auto update user faces"
    minute: "*/30"
    user: root
    job: /usr/local/bin/update-gdm-faces.sh
    cron_file: update-gdm-faces

- name: Find /boot/luks.pwd
  stat:
    path: /boot/luks.pwd
  register: stat_luks_pwd

- block:
  - name: Create new luks key from TPM2
    shell: "PASSWORD=pwd systemd-cryptenroll --tpm2-device=auto --tpm2-pcrs=7 $( lsblk --fs -lp | awk '/crypto_LUKS/ { print $1; }' )"

  - name: "Modify /etc/crypttab"
    lineinfile:
      path: /etc/crypttab
      regexp: '([a-z0-9\-]+)\s+([A-Za-z0-9=\-]+)\s*.*'
      line: '\g<1> \g<2> - tpm2-device=auto/'
      backrefs: yes

  - name: "Recreate initial ram disk"
    command: dracut  --regenerate-all --force

  - name: "Remove /boot/luks.pwd"
    file:
      path: /boot/luks.pwd
      state: absent
  when: stat_luks_pwd.stat.exists





# PASSWORD=pwd systemd-cryptenroll --tpm2-device=auto --tpm2-pcrs=7 $( lsblk --fs -lp | awk '/crypto_LUKS/ { print $1; }' )
# sed -i -E 's/([a-z0-9\-]+)\s+([A-Za-z0-9=\-]+)\s*.*/\1 \2 - tpm2-device=auto/' /etc/crypttab
# dracut -f

