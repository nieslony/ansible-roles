# tasks file for webserver
- set_fact:
    debug_defaults: yes

- name: Import facts
  import_tasks: "../../default_facts/default_facts.yml"

- name: "Build vhost_names from {{ webserver_vhosts }}"
  set_fact:
    vhost_names: "{{ (vhost_names is defined) | ternary(vhost_names, []) + [ (item is string) | ternary(item, item.name) ] }}"
  loop: "{{ webserver_vhosts }}"

- set_fact:
    vhost_aliases: "{{ vhost_names | difference([ansible_fqdn]) }}"

- name: "Create logical volume for /var/www"
  block:
    - name: "Create volume {{ lvm_volume }} with size {{ webserver_lvm_volsize_gb }}GB"
      lvol:
        vg: "{{ system_volume_group }}"
        lv: "{{ lvm_volume }}"
        size: "{{ webserver_lvm_volsize_gb }}G"

    - name: Create filesystem
      filesystem:
        fstype: xfs
        dev: "/dev/{{ system_volume_group }}/{{ lvm_volume }}"

    - name: Mount file system
      mount:
        path: /var/www
        src: "/dev/{{ system_volume_group }}/{{ lvm_volume }}"
        fstype: xfs
        state: mounted
  when: webserver_lvm_volsize_gb > 0 and system_volume_group is defined

- name: Create document root for vhosts
  file:
    path: "/var/www/html/{{ item }}"
    state: directory
  loop: "{{ vhost_names }}"

- name:  "Create logical volumes for vhosts"
  block:
    - name: "Create volumes for vhosts"
      lvol:
        vg: "{{ system_volume_group }}"
        lv: "var_www_html_{{ item.name }}"
        size: "{{ item.size_gb }}G"
      when: item is mapping
      loop: "{{ webserver_vhosts }}"

    - name: "Create filesystems for vhosts"
      filesystem:
        fstype: xfs
        dev: "/dev/{{ system_volume_group }}/var_www_html_{{ item.name}}"
      when: item is mapping
      loop: "{{ webserver_vhosts }}"

    - name: "Mount file system for vhosts"
      mount:
        path: "/var/www/html/{{ item.name }}"
        src: "/dev/{{ system_volume_group }}/var_www_html_{{ item.name }}"
        fstype: xfs
        state: mounted
      when: item is mapping
      loop: "{{ webserver_vhosts }}"
  when: system_volume_group is defined

- name: "Install packages: {{ packages | join(', ') }}"
  package:
    name: "{{ packages }}"
    state: latest

- name: "Create group apache"
  group:
    name: apache
    system: yes

- name: "Create apache user"
  user:
    name: apache
    create_home: no
    group: apache
    home: /usr/share/httpd
    shell: /sbin/nologin
    system: yes

- name: Chown document root for vhosts
  file:
    path: "/var/www/html/{{ item }}"
    state: directory
    owner: apache
    group: apache
    setype: _default
    seuser: _default
    serole: _default
    mode: "2775"
  loop: "{{ vhost_names }}"

- name: "Create host objects for vhosts {{ vhost_names }}"
  ipahost:
    ipaadmin_password: "{{ ipaadmin_password | default(omit) }}"
    fqdn: "{{ item }}"
    state: present
    force: yes
    random: yes
    update_password: on_create
    managedby_host: "{{ ansible_fqdn }}"
  loop: "{{ vhost_names }}"
  when: item != ansible_fqdn
  delegate_to: "{{ (ipaadmin_password is not defined) | ternary('127.0.0.1', omit) }}"
  become: no
  environment: "{{ env_ipa_on_server }}"

- name: "Create CNAMES for vhost {{ vhost_names }}"
  ipadnsrecord:
    ipaadmin_password: "{{ ipaadmin_password | default(omit) }}"
    zone_name: "{{ item.split('.')[1:] | join('.') }}"
    record_type: CNAME
    record_value: "{{ ansible_fqdn }}."
    name: "{{ item | split('.') | first }}"
  loop: "{{ vhost_names }}"
  when: item != ansible_fqdn
  delegate_to: "{{ (ipaadmin_password is not defined) | ternary('127.0.0.1', omit) }}"
  become: no
  environment: "{{ env_ipa_on_server }}"

- name: "Build additional service principal"
  set_fact:
    service_princs: "{{ vhost_aliases | difference([ansible_fqdn]) | map('regex_replace', '^', 'HTTP/') }}"

- name: "Create service HTTP/{{ ansible_fqdn }} with additional service principals {{ service_princs }}"
  ipaservice:
    ipaadmin_password: "{{ ipaadmin_password | default(omit) }}"
    name: "HTTP/{{ ansible_fqdn }}"
    principal: "{{ (service_princs | length > 0) | ternary(service_princs, omit) }}"
  delegate_to: "{{ (ipaadmin_password is not defined) | ternary('127.0.0.1', omit) }}"
  become: no
  environment: "{{ env_ipa_on_server }}"

- name: "Get keytab"
  shell:
    cmd: |
        kinit -k || exit 1
        ipa-getkeytab -p HTTP/{{ ansible_fqdn }} -k /etc/httpd/krb5.keytab
    creates: /etc/httpd/krb5.keytab

- name: "Chown keytab"
  file:
    path: /etc/httpd/krb5.keytab
    owner: apache
    mode: 0600

- name: "Get SSL certificate for webserver"
  command:
    cmd: >-
        ipa-getcert request
            --keyfile {{ ssl_key_file }}
            --certfile {{ ssl_cert_file }}
            --key-owner apache
            --cert-owner apache
            --principal HTTP/{{ ansible_fqdn }}
            {%- for host in vhost_names -%}
                {%- for dom in ipa_dns_domains -%}
                    {%- if host.endswith("." + dom) %}
                        --dns {{ host }}
                    {%- endif -%}
                {%- endfor -%}
            {%- endfor %}
            --wait
    creates: "{{ ssl_cert_file }}"
  environment: "{{ env_ipa_on_host }}"
  notify: restart_httpd

- name: Copy default_vhost.conf
  copy:
    src: default_vhost.conf
    dest: /etc/httpd/conf.d/default_vhost.conf
  notify: restart_httpd

- name: Copy vhost configuration files
  template:
    src: vhost.conf
    dest: "/etc/httpd/conf.d/{{ item }}.conf"
  loop: "{{ vhost_names }}"
  notify: restart_httpd

- name: "Create vhost include folders"
  file:
    path: "/etc/httpd/conf.d/{{ item }}.conf.inc.d"
    state: directory
  loop: "{{ vhost_names }}"

- name: Find ssl.conf
  stat:
    path: /etc/httpd/conf.d/ssl.conf
  register: stat_ssl_conf
  changed_when: no

- block:
    - name: "Rename ssl.conf"
      command:
        cmd: mv /etc/httpd/conf.d/ssl.conf /etc/httpd/conf.d/ssl.conf.disabled

    - name: "Create empty ssl.conf"
      file:
        path: /etc/httpd/conf.d/ssl.conf
        state: touch
  when: stat_ssl_conf.stat.exists and stat_ssl_conf.stat.size > 0
  notify: restart_httpd

- block:
    - name: "Install packages for whoami: {{ whoami_packages | join(', ') }}"
      dnf:
        name: "{{ whoami_packages }}"
        state: latest

    - name: "Copy WhoAmI app to {{ whoami_folder }}"
      copy:
        src: whoami/
        dest: "{{ whoami_folder }}"
      notify: restart_httpd

    - name: "Install whoami.conf"
      template:
        src: whoami.conf
        dest: "{{ whoami_folder }}"
      notify: restart_httpd

    - name: "Add webapp to vhosts"
      file:
        src: "{{ whoami_folder }}/whoami.conf"
        dest: "/etc/httpd/conf.d/{{ item }}.conf.inc.d/whoami.conf"
        state: link
      loop: "{{ webserver_vhosts }}"
      notify: restart_httpd

    - name: "Allow httpd -> LDAP connections"
      seboolean:
        name: httpd_can_connect_ldap
        state: true
        persistent: true
  when: webserver_whoami_app_enabled

- block:
    - name: "Install sssd-dbus"
      dnf:
        name:
          - sssd-dbus
          - mod_lookup_identity
        state: latest

    - name: "Read sssd.conf"
      slurp:
        path: /etc/sssd/sssd.conf
      register: sssd_conf

    - set_fact:
        sssd_services: |-
            {{
                sssd_conf.content
                    | b64decode
                    | regex_findall('\nservices *= *[a-z, ]+')
                    | first
                    | split(' = ')
                    | last
                    | split(', ')
                    | union(['ifp'])
                    | sort
                    | join(', ')
            }}

    - name: "Set SSSD services {{ sssd_services }}"
      ini_file:
        path: /etc/sssd/sssd.conf
        section: sssd
        option: services
        value: "{{ sssd_services }}"
      notify: restart_sssd

    - name: "Set ldap_extra_attrs: {{ webserver_infopipe_extra_attrs | join(', ') }}"
      ini_file:
        path: /etc/sssd/sssd.conf
        section: "{{ item | regex_replace('[\\[\\]]', '') }}"
        option: ldap_extra_attrs
        value: "{{ webserver_infopipe_extra_attrs | join(', ') }}"
      loop: "{{ sssd_conf.content | b64decode | regex_findall('\\[domain/[a-zA-Z0-9\\-.]+\\]') }}"
      notify: restart_sssd

    - name: "Configure section ifp in sssd.conf"
      ini_file:
        path: /etc/sssd/sssd.conf
        section: ifp
        option: "{{ item.option }}"
        value: "{{ item.value }}"
      loop:
        - { option: allowed_uids, value: "apache, root" }
        - { option: user_attributes, value: "+{{ webserver_infopipe_extra_attrs | join(', +') }}" }
      notify: restart_sssd

    - name: "Enable Apache module"
      lineinfile:
        path: /etc/httpd/conf.modules.d/55-lookup_identity.conf
        regexp: '# *(LoadModule +lookup_identity_module +.*)'
        line: '\1'
        backrefs: yes
      notify: restart_sssd

    - name: "Allow httpd access to dbus"
      seboolean:
        name: httpd_dbus_sssd
        state: on
        persistent: true
      notify: restart_httpd
  when: webserver_infopipe_enabled

- block:
  - name: "Set file context httpd_sys_rw_content_t for {{ krb_ccache_dir }}(/.*)?'"
    sefcontext:
      target: "{{ krb_ccache_dir }}(/.*)?'"
      setype: httpd_sys_rw_content_t
      state: present

  - name: "Create client credential cache {{ krb_ccache_dir }}"
    file:
      path: "{{ krb_ccache_dir }}"
      state: directory
      owner: apache
      mode: 0700
      setype: httpd_sys_rw_content_t

  - name: "Create to delegation targets"
    ipaservicedelegationtarget:
        ipaadmin_password: "{{ ipaadmin_password | default(omit) }}"
        name: "{{ item.key }}"
    with_dict: "{{ webserver_constrained_delegation_targets }}"
    delegate_to: "{{ (ipaadmin_password is not defined) | ternary('127.0.0.1', omit) }}"
    become: no
    environment: "{{ env_ipa_on_server }}"

  - set_fact:
      local_delegation_targets: "{{
        webserver_constrained_delegation_targets.values()
            | flatten
            | map('regex_replace', '@.*', '')
            | unique
            | select('regex', '/' + ansible_fqdn + '$')
            }}"

  - name: "Create local delagation targets: {{ local_delegation_targets }}"
    ipaservice:
      name: "{{ item }}"
    environment: "{{ env_ipa_on_host }}"
    with_items: "{{ local_delegation_targets }}"

  - name: "Add members to delegation targets"
    ipaservicedelegationtarget:
        ipaadmin_password: "{{ ipaadmin_password | default(omit) }}"
        name: "{{ item.key }}"
        principal: "{{ item.value }}"
        action: member
    with_dict: "{{ webserver_constrained_delegation_targets }}"
    delegate_to: "{{ (ipaadmin_password is not defined) | ternary('127.0.0.1', omit) }}"
    become: no
    environment: "{{ env_ipa_on_server }}"

  - name: "Create delegation rule {{ webserver_constrained_delegation_rule }}"
    ipaservicedelegationrule:
        ipaadmin_password: "{{ ipaadmin_password | default(omit) }}"
        name: "{{ webserver_constrained_delegation_rule }}"
    delegate_to: "{{ (ipaadmin_password is not defined) | ternary('127.0.0.1', omit) }}"
    become: no
    environment: "{{ env_ipa_on_server }}"

  - name: "Add targets to rule {{ webserver_constrained_delegation_rule }}"
    ipaservicedelegationrule:
        ipaadmin_password: "{{ ipaadmin_password | default(omit) }}"
        name: "{{ webserver_constrained_delegation_rule }}"
        target: "{{ item.key }}"
        action: member
    with_dict: "{{ webserver_constrained_delegation_targets }}"
    delegate_to: "{{ (ipaadmin_password is not defined) | ternary('127.0.0.1', omit) }}"
    become: no
    environment: "{{ env_ipa_on_server }}"

  - name: "Add HTTP/{{ ansible_fqdn }} to rule {{ webserver_constrained_delegation_rule }}"
    shell:
      cmd: |
        trap kdestroy -A EXIT
        if [ -z "$KRB5_CLIENT_KTNAME" ]; then
            sleep 1
            timeout 3s kinit admin || exit 2
        fi
        if ipa servicedelegationrule-show {{ webserver_constrained_delegation_rule }} --raw | grep -q "memberprincipal: HTTP/{{ ansible_fqdn }}" ; then
            exit 1
        else
                ipa servicedelegationrule-add-member {{ webserver_constrained_delegation_rule }} --principals=HTTP/{{ ansible_fqdn }} || exit 2
        fi
      stdin: "{{ ipaadmin_password | default(omit) }}"
    changed_when: add_princible_result.rc == 0
    failed_when: add_princible_result.rc > 1
    register: add_princible_result
    environment: "{{ env_ipa_on_server }}"

      # - name: "Add HTTP/{{ ansible_fqdn }} to rule {{ webserver_constrained_delegation_rule }}"
      #   ipaservicedelegationrule:
      #     ipaadmin_password: "{{ ipaadmin_password }}"
      #     name: "{{ webserver_constrained_delegation_rule }}"
      #     # principal: "HTTP/{{ ansible_fqdn }}"
      #     action: member
  when: webserver_constrained_delegation_enabled

- name: Enable and start services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - httpd
    - firewalld

- name: Open http/https in firewall
  firewalld:
    service: "{{ item }}"
    permanent: yes
    state: enabled
    immediate: yes
  with_items:
    - http
    - https
