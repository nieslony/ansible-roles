# tasks file for webserver
- name: Import facts
  import_tasks: "../../default_facts/default_facts.yml"

- name: "Build vhost_names"
  set_fact:
    vhost_names: "{{ (vhost_names is defined) | ternary(vhost_names, []) + [ (item is string) | ternary(item, item.name) ] }}"
  loop: "{{ vhosts }}"

- name: "Create logical volume for /var/www"
  block:
    - name: "Create volume {{ lvm_volume }} with size {{ lvm_volsize_gb }}GB"
      lvol:
        vg: "{{ system_volume_group }}"
        lv: "{{ lvm_volume }}"
        size: "{{ lvm_volsize_gb }}G"

    - name: Create filesystem
      filesystem:
        fstype: xfs
        dev: "/dev/{{ system_volume_group }}/{{ lvm_volume }}"

    - name: Mount file system
      mount:
        path: /var/www
        src: "/dev/{{ system_volume_group }}/{{ lvm_volume }}"
        fstype: xfs
        state: mounted
  when: lvm_volsize_gb > 0 and system_volume_group is defined

- name:  "Create logical volumes for vhosts"
  block:
    - name: "Create volumes for vhosts"
      lvol:
        vg: "{{ system_volume_group }}"
        lv: "var_www_{{ item.name }}"
        size: "{{ item.size_gb }}G"
      when: item is mapping
      loop: "{{ vhosts }}"

    - name: "Create filesystems for vhosts"
      filesystem:
        fstype: xfs
        dev: "/dev/{{ system_volume_group }}/var_www_{{ item.name}}"
      when: item is mapping
      loop: "{{ vhosts }}"

    - name: "Mount file system for vhosts"
      mount:
        path: "/var/www/{{ item.name }}"
        src: "/dev/{{ system_volume_group }}/var_www_{{ item.name }}"
        fstype: xfs
        state: mounted
      when: item is mapping
      loop: "{{ vhosts }}"
  when: system_volume_group is defined

- name: "Install packages: {{ packages | join(', ') }}"
  package:
    name: "{{ packages }}"
    state: latest

- name: "Create group apache"
  group:
    name: apache
    system: yes

- name: "Create apache user"
  user:
    name: apache
    create_home: no
    group: apache
    home: /usr/share/httpd
    shell: /sbin/nologin
    system: yes

- name: Scan host objects of vhosts
  shell: |
    kinit -k
    ipa host-show {{ item }} --raw | grep -q "managedby: fqdn={{ ansible_fqdn }}"
    kdestroy
  loop: "{{ vhost_names }}"
  register: found_managedby
  ignore_errors: yes
  changed_when: no

- set_fact:
    add_managed: []

- name: Find unmanaged hosts
  set_fact:
    add_managed: "{{ add_managed | default([]) + [item.item] }}"
  with_items: "{{ found_managedby.results }}"
  when:
    - item.rc == 1
    - item.item != ansible_fqdn

- name: "Create CNAMES and host objects remote with admin password"
  block:
    - debug:
        msg: "Create CNAMES and host objects remote with admin password"

    - name: "Create host objects {{ vhost_names }}"
      ipa_host:
        ipa_host: "{{ ipa_server | default(omit) }}"
        ipa_pass: "{{ ipaadmin_password }}"
        fqdn: "{{ item }}"
        state: present
        force: yes
        random_password: yes
      loop: "{{ add_managed }}"
      environment:
        http_proxy: ""
        https_proxy: ""

    - name: "Create CNAMES for vhost {{ vhost_names }}"
      ipa_dnsrecord:
        ipa_pass: "{{ ipaadmin_password }}"
        ipa_host: "{{ ipa_server | default(omit) }}"
        zone_name: "{{ item.split('.')[1:] | join('.') }}"
        record_type: CNAME
        record_value: "{{ ansible_fqdn }}."
        record_name: "{{ item | split('.') | first }}"
      when:
        - item != ansible_fqdn
        - ((item | split('.'))[1:] | join('.')) in ipa_dns_domains
      loop: "{{ vhost_names }}"
      environment:
        http_proxy: ""
        https_proxy: ""

    - name: "Add managedby {{ ansible_fqdn }}"
      shell: |
        echo "{{ ipaadmin_password }}" | kinit admin
        ipa host-add-managedby --hosts={{ ansible_fqdn }} {{ item }}
        kdestroy
      when: item != ansible_fqdn
      loop: "{{ vhost_names }}"
  when: ipaadmin_password is defined

- name: "Create CNAMES and host objects remote with keytab {{ realm_keytab }}"
  block:
    - debug:
        msg: "Create CNAMES and host objects remote with keytab {{ realm_keytab }}"

    - name: "Create host objects {{ vhost_names }}"
      vars:
        ansible_python_interpreter: /bin/python3.6
      ipa_host:
        fqdn: "{{ item }}"
        state: present
        force: true
        random_password: yes
      when: item != ansible_fqdn
      loop: "{{ vhost_names }}"
      environment:
        KRB5_CLIENT_KTNAME: "{{ realm_keytab }}"

    - name: "Create CNAMES for vhosts {{ vhost_names }}"
      vars:
        ansible_python_interpreter: /bin/python3.6
      ipa_dnsrecord:
        zone_name: "{{ item.split('.')[1:] | join('.') }}"
        record_type: CNAME
        record_value: "{{ ansible_fqdn }}."
        record_name: "{{ item | split('.') | first }}"
      when:
        - item != ansible_fqdn
        - ((item | split('.'))[1:] | join('.')) in ipa_dns_domains
      loop: "{{ vhost_names }}"
      environment:
        KRB5_CLIENT_KTNAME: "{{ realm_keytab }}"

    - name: "Add managedby {{ ansible_fqdn }}"
      shell: |
        kinit -k -t {{ realm_keytab }} realm-proxy || exit 1
        ipa host-add-managedby --hosts={{ ansible_fqdn }} {{ item }} || exit 1
        kdestroy
      loop: "{{ add_managed }}"
  when: is_realmproxy
  delegate_to: 127.0.0.1

- name: "Create service HTTP/{{ ansible_fqdn }} on {{ ipa_server }}"
  ipa_service:
    name: "HTTP/{{ ansible_fqdn }}"
    ipa_host: "{{ ipa_server | default(omit) }}"
  environment:
    KRB5_CLIENT_KTNAME: /etc/krb5.keytab
    http_proxy: ""
    https_proxy: ""

- name: "Find krbprincipalname of service HTTP/{{ ansible_fqdn }}"
  shell: |
    kinit -k
    ipa service-show --raw HTTP/{{ ansible_fqdn }} | awk '/krbprincipalname:/ {
        split($2, arr, "@");
        print arr[1];
    }'
    kdestroy
  register: find_krbprincipalname
  changed_when: no

- block:
    - name: "Create krbprincipalname {{ find_krbprincipalname.stdout_lines | join(', ') }} of service HTTP/{{ ansible_fqdn }} with keytab"
      shell: |
            kinit -k -t {{ realm_keytab }} realm-proxy || exit 1
            ipa service-add-principal HTTP/{{ ansible_fqdn }} HTTP/{{ item }}
            kdestroy
      loop: "{{ vhost_names }}"
      when: item not in find_krbprincipalname.stdout_lines
      delegate_to: 127.0.0.1
  when: is_realmproxy

- block:
    - name: "Create krbprincipalname {{ find_krbprincipalname.stdout_lines | join(', ') }} of service HTTP/{{ ansible_fqdn }} with admin password"
      shell:
        cmd: |
          kinit || exit 1
          ipa service-add-principal HTTP/{{ ansible_fqdn }} HTTP/{{ item }}
          kdestroy
        stdin: "{{ ipaadmin_password }}\n"
      loop: "{{ vhost_names }}"
      when: item not in find_krbprincipalname.stdout_lines
  when: ipaadmin_password is defined

- name: "Get keytab"
  shell:
    cmd: |
        kinit -k
        ipa-getkeytab -p HTTP/{{ ansible_fqdn }} -k /etc/httpd/krb5.keytab
        kdestroy
    creates: /etc/httpd/krb5.keytab

- name: "Chown keytab"
  file:
    path: /etc/httpd/krb5.keytab
    owner: apache
    mode: 0600

- name: "Get SSL certificate for webserver"
  command:
    cmd: >
        ipa-getcert request
            --keyfile {{ ssl_key_file }}
            --certfile {{ ssl_cert_file }}
            --key-owner apache
            --cert-owner apache
            --principal host/{{ ansible_fqdn }}
            --dns {{ (vhost_names + [ansible_fqdn]) | intersect(ipa_dns_domains) | unique | join(' --dns ') }}
            --wait
    creates: "{{ ssl_cert_file }}"
  environment:
    KRB5_CLIENT_KTNAME: /etc/krb5.keytab
    http_proxy: ""
    https_proxy: ""
  notify: restart_httpd

- name: Copy default_vhost.conf
  copy:
    src: default_vhost.conf
    dest: /etc/httpd/conf.d/default_vhost.conf
  notify: restart_httpd

- name: Create document root for vhosts
  file:
    path: "/var/www/{{ item }}"
    state: directory
    owner: apache
    group: apache
  loop: "{{ vhost_names }}"

- name: Copy vhost configuration files
  template:
    src: vhost.conf
    dest: "/etc/httpd/conf.d/{{ item }}.conf"
  loop: "{{ vhost_names }}"
  notify: restart_httpd

- name: "Create vhost include folders"
  file:
    path: "/etc/httpd/conf.d/{{ item }}.conf.inc.d"
    state: directory
  loop: "{{ vhost_names }}"

- name: Find ssl.conf
  stat:
    path: /etc/httpd/conf.d/ssl.conf
  register: stat_ssl_conf
  changed_when: no

- block:
    - name: "Rename ssl.conf"
      command:
        cmd: mv /etc/httpd/conf.d/ssl.conf /etc/httpd/conf.d/ssl.conf.disabled

    - name: "Create empty ssl.conf"
      file:
        path: /etc/httpd/conf.d/ssl.conf
        state: touch
  when: stat_ssl_conf.stat.exists and stat_ssl_conf.stat.size > 0
  notify: restart_httpd

- block:
    - name: "Install packages for whoami: {{ whoami_packages | join(', ') }}"
      dnf:
        name: "{{ whoami_packages }}"
        state: latest

    - name: "Copy WhoAmI app to {{ whoami_folder }}"
      copy:
        src: whoami/
        dest: "{{ whoami_folder }}"
      notify: restart_httpd

    - name: "Add webapp to vhosts"
      file:
        src: "{{ whoami_folder }}/whoami.conf"
        dest: "/etc/httpd/conf.d/{{ item }}.conf.inc.d/whoami.conf"
        state: link
      loop: "{{ vhosts }}"
      notify: restart_httpd
  when: enable_whoami_app

- block:

  when: enable_infopipe

  - name: Enable and start services
  service:
    name: "{{item }}"
    enabled: yes
    state: started
  with_items:
    - httpd
    - firewalld

- name: Open http/https in firewall
  firewalld:
    service: "{{ item }}"
    permanent: yes
    state: enabled
    immediate: yes
  with_items:
    - http
    - https
