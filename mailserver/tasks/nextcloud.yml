# https://technixleo.com/install-nextcloud-on-centos-alma-rhel/
# The current PHP memory limit is below the recommended value of 512MB.
# https://nextcloud-mail.readthedocs.io/en/v0.18.0/admin/

- block:
  - name: "Find foreman repo list"
    stat:
      path: /etc/yum.repos.d/remi.repo
    register: stat_remi_repo

  - name: "nextcloud : Add PHP remi repo"
    dnf:
      name: "{{ php_remi_repo }}"
      disable_gpg_check: yes
    when:
      - php_remi_repo != ""
      - not stat_remi_repo.stat.exists
  when: foreman['organization'] is not defined

- name: "nextcloud : Find remi module"
  shell: 'dnf module list --enabled | grep -q "php *remi-{{ php_remi_release }}"'
  register: find_remi_module
  changed_when: no
  ignore_errors: yes

- name: "nextcloud : Install php remi {{ php_remi_release }}"
  command: "dnf -y module enable php:remi-{{ php_remi_release }}"
  when: find_remi_module.rc != 0

- name: "nextcloud : Install packages {{ packages_nextcloud | join(', ') }}"
  dnf:
    name: "{{ packages_nextcloud }}"
    state: latest

- name: "nextcloud : setfcontext for {{ nextcloud_folder }}"
  sefcontext:
    target: "{{ nextcloud_folder }}(/.*)"
    setype: httpd_sys_content_t

- name: "nextcloud setfcontext for {{ nextcloud_folder}}'s subfolders"
  sefcontext:
    target: "{{ item }}"
    setype: httpd_sys_rw_content_t
  loop:
    - '{{ nextcloud_folder }}/data(/.*)?'
    - '{{ nextcloud_folder }}/config(/.*)?'
    - '{{ nextcloud_folder }}/apps(/.*)?'
    - '{{ nextcloud_folder }}/.htaccess'
    - '{{ nextcloud_folder }}/.user.ini'
    - '{{ nextcloud_folder }}/3rdparty/aws/aws-sdk-php/src/data/logs(/.*)?'
  notify: relabel_nextcloud

- name: "nextcloud : Create nextcloud folder"
  stat:
    path: "{{ nextcloud_occ }}"
  register: stat_nextcloud
  changed_when: no

- name: "nextcloud : find nextcloud users"
  shell:
    cmd: >
        for i in {{
            nextcloud_ipa_users.values()
            | selectattr('name')
            | map(attribute='name')
            | join(' ')
        }} ; do
            getent passwd $i | awk -F: '{ print $1; }' ;
        done
  register: found_users
  changed_when: no

- set_fact:
    create_users: {}

- set_fact:
    create_users: "{{ create_users | combine({item.key: item.value}) }}"
  when: item.value.name not in found_users.stdout_lines
  loop: "{{ nextcloud_ipa_users | dict2items }}"

- name: "nextcloud : Create email users {{ create_users.keys() | list }} with keytab"
  shell:
    cmd: >-
      ipa user-add "{{ item.value.name }}"
      --displayname="{{ item.value.displayname }}"
      --password
      --password-expiration="2050-12-31Z"
      --email="{{ item.value.mail }}"
      --first="{{ item.value.givenname }}"
      --last="{{ item.value.sn }}"
    stdin: "{{ item.password }}\n{{ item.password }}\n"
  loop: "{{ create_users | dict2items }}"
  delegate_to: 127.0.0.1
  environment:
    KRB5_CLIENT_KTNAME: /etc/foreman-proxy/freeipa.keytab
    http_proxy: ""
    https_proxy: ""
    HOME: /tmp
  when: is_realmproxy

- name: "nextcloud : Create email users {{ create_users.keys() | list }} with admin password"
  ipa_user:
    name: "{{ item.value.name }}"
    displayname: "{{ item.value.displayname }}"
    password: "{{ item.value.password }}"
    mail: "{{ item.value.mail | default(omit) }}"
    givenname: "{{ item.value.givenname }}"
    sn: "{{ item.value.sn }}"
    krbpasswordexpiration: "2050-12-31"
    state: present
    update_password: on_create
    ipa_pass: "{{ ipaadmin_password }}"
    ipa_host: "{{ ipa_server | default(omit) }}"
  loop: "{{ create_users | dict2items }}"
  environment:
    http_proxy: ""
    https_proxy: ""
  when: ipaadmin_password is defined

- name: "nextcloud : Download and install software"
  block:
    - name: "nextcloud : Download software"
      get_url:
        url: https://download.nextcloud.com/server/releases/latest-{{ nextcloud_release }}.zip
        dest: /tmp

    - name: "nextcloud : Unpack software"
      unarchive:
        src: /tmp/latest-{{ nextcloud_release }}.zip
        dest: "{{ (nextcloud_folder | split('/'))[:-1] | join('/')}}"
        remote_src: yes

    - name: "nextcloud : Remove tmp file"
      file:
        name: /tmp/latest-{{ nextcloud_release }}.zip
        state: absent

    - name: "nextcloud : chown apache"
      file:
        name: "{{ nextcloud_folder }}"
        owner: apache
        group: apache
        recurse: yes
  when: not stat_nextcloud.stat.exists

- name: "nextcloud : configure php.ini"
  vars:
    settings:
      expose_php: "Off"
      max_execution_time: "360"
      max_input_time: "180"
      memory_limit: "-1"
      upload_max_filesize: "1024MB"
  ini_file:
    path: /etc/php.ini
    section: PHP
    option: "{{ item.key }}"
    value: "{{ item.value | string }}"
  loop: "{{ settings | dict2items }}"

- name: "nextcloud : configure php.d/10-opcache.ini"
  ini_file:
    path: /etc/php.d/10-opcache.ini
    section:
    option: opcache.interned_strings_buffer
    value: "32"

- name: "nextcloud: configure php apcu.ini"
  ini_file:
    path: /etc/php.d/40-apcu.ini
    option: "apc.enable_cli"
    value: "1"

- name: "nextcloud : Start services"
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - mysqld
    - php-fpm
    - redis

- name: "nextcloud : Set some selinux boleans => On"
  seboolean:
    name: "{{ item }}"
    state: yes
    persistent: yes
  loop:
    - httpd_can_network_connect
    - httpd_unified

- name: "nextcloud : Create database"
  mysql_db:
    name: nextcloud

- name: "nextcloud : Create DB user"
  mysql_user:
    name: nextcloud
    priv: "nextcloud.*:ALL"
    password: "{{ roundcube_password }}"

- name: "nextcloud : Make occ executable"
  file:
    path: "{{ nextcloud_occ }}"
    mode: 0755

- name: "nextcloud : copy apache config"
  template:
    src: nextcloud.conf
    dest: /etc/httpd/conf.d/{{ mail_cloud_fqdn }}.conf.inc
  notify: restart_httpd

- name: "nextcloud : Setup nextcloud with occ"
  become: yes
  become_user: apache
  command:
    cmd: >-
        {{ nextcloud_occ }} maintenance:install
            --database=mysql
            --database-name=nextcloud
            --database-host=localhost
            --database-user=nextcloud
            --database-pass={{ roundcube_password }}
            --admin-user={{ nextcloud_admin_user }}
            --admin-pass={{ nextcloud_admin_password }}
            --data-dir={{ nextcloud_folder }}/data
    creates: "{{ nextcloud_folder }}/config/config.php"

# see https://blog.effenberger.org/2018/07/09/nextcloud-installation-via-command-line/
- name: "nextcloud : config system"
  become: yes
  become_user: apache
  command: |-
    {{ nextcloud_occ }}
    config:system:set
    {{ item.key }}
    {{ item.type is defined | ternary(item.type, "") }}
    --value='{{ item.value }}'
  with_items: "{{ nextcloud_system_config }}"

- name: "nextcloud : setup crontab"
  cron:
    name: nextcloud
    user: apache
    job: "php -f {{ nextcloud_folder }}/cron.php"
    minute: "*/5"

- name: "nextcloud : Update .htaccess"
  copy:
    src: nextcloud_htaccess
    dest: "{{ nextcloud_folder }}/.htaccess"

- name: "nextcloud : create symlink ocm-provider"
  file:
    path: "{{ nextcloud_folder }}/ocm-provider"
    src: "{{ nextcloud_folder }}/ocs-provider"
    state: link

- name: "nextcloud : Get admin's display name"
  become: yes
  become_user: apache
  command: "{{ nextcloud_occ }} user:setting nc-admin settings display_name"
  register: admin_displayname
  changed_when: no

- name: "nextcloud : Set admin's display name"
  become: yes
  become_user: apache
  command: "{{ nextcloud_occ }} user:setting {{ nextcloud_admin_user }} settings display_name '{{ nextcloud_admin_displayname }}'"
  when: admin_displayname.stdout != nextcloud_admin_displayname

- name: "nextcloud : Get admin's email address"
  become: yes
  become_user: apache
  command: "{{ nextcloud_occ }} user:setting nc-admin settings email"
  register: admin_email
  changed_when: no
  ignore_errors: yes

- name: "nextcloud : Set admin's email address"
  become: yes
  become_user: apache
  command: "{{ nextcloud_occ }} user:setting {{ nextcloud_admin_user }} settings display_name '{{ nextcloud_ipa_users.mail.mail }}'"
  when: admin_email.stdout != nextcloud_ipa_users.mail.mail

- name: "nextcloud : Find installed apps"
  find:
    recurse: no
    paths: "{{ nextcloud_folder }}/apps"
    file_type: directory
  register: installed_apps

- name: "nextcloud : get installed apps"
  set_fact:
    installed_apps: >-
        {{
            installed_apps.files
            | selectattr("path", "defined")
            | map(attribute='path')
            | map('regex_replace', '^.*/', '')
        }}

- name: "nextcloud : Install apps"
  become: yes
  become_user: apache
  command: "{{ nextcloud_occ }} app:install {{ item }}"
  with_items: "{{ nextcloud_install_apps }}"
  when: not item in installed_apps

- name: "nextcloud : Enable apps"
  become: yes
  become_user: apache
  command: "{{ nextcloud_occ }} app:enable {{ item }}"
  with_items: "{{ nextcloud_enable_apps }}"

- name: "nextcloud : Configure app core"
  become: yes
  become_user: apache
  command: "{{ nextcloud_occ }} config:app:set --value={{ item.value }} core {{ item.key }}"
  with_items:
    - { key: backgroundjobs_mode, value: cron }

- name: "nextcloud : Configure app user_saml"
  become: yes
  become_user: apache
  command: "{{ nextcloud_occ }} saml:config:set --general-uid_mapping REMOTE_USER 1"

- name: "nextcloud : Configure app user_saml (2)"
  become: yes
  become_user: apache
  command: "{{ nextcloud_occ }} config:app:set user_saml {{ item.key}} --value {{ item.value }}"
  with_items: "{{ nextcloud_user_saml_config | dict2items }}"

- name: "nextcloud : Find ldap config"
  become: yes
  become_user: apache
  command: "{{ nextcloud_occ }} ldap:show-config --output=json --show-password"
  register: nc_ldap_config
  changed_when: false

- set_fact:
    current_ldap_config: "{{ nc_ldap_config.stdout | from_json }}"

- name: "nextcloud : Create ldap config"
  become: yes
  become_user: apache
  command: "{{ nextcloud_occ }} ldap:create-empty-config"
  when: nc_ldap_config.stdout | from_json | length == 0

- name: "nextcloud : Configure app user_ldap"
  become: yes
  become_user: apache
  command: "{{ nextcloud_occ }} ldap:set-config s01 {{ item.key }} '{{ item.value }}'"
  with_items: "{{ nextcloud_ldap_config | dict2items }}"
  when: >
    nc_ldap_config.stdout | length == 0
    or
    current_ldap_config.s01[item.key] is not defined
    or
    current_ldap_config.s01[item.key] != item.value

- name: "nextcloud : Test app user_ldap"
  become: yes
  become_user: apache
  command: "{{ nextcloud_occ }} ldap:test-config s01"

- name: "nextcloud : Install fail2ban filter"
  copy:
    src: nextcloud.conf
    dest: /etc/fail2ban/filter.d
  notify: restart_fail2ban

- name: "nextclizud : Install nextcloud.local"
  template:
    src: nextcloud.local
    dest: /etc/fail2ban/jail.d
  notify: restart_fail2ban

- name: "postfix : copy nextcloud.te"
  copy:
    src: nextcloud.te
    dest: /var/local/selinux-modules
  notify: selinux_module_nextcloud
